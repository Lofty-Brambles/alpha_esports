---
export interface Props {
  title: string;
  description: string;
  tags: string[];
  image: {
    url: string;
    alt: string;
  };
}
const { title, description, tags, image } = Astro.props;
const canonicalURL = new URL(Astro.request.url).href;
---

<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="robots" content="index, follow" />
<meta name="googlebot" content="index, follow" />
<meta name="generator" content={Astro.generator} />

<meta name="format-detection" content="telephone=no" />
<meta name="mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-title" content={title} />
<meta name="application-name" content={title} />
<meta name="msapplication-TileColor" content="#00aba9" />
<meta name="theme-color" content="#000000" />

<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

<meta property="og:site_name" content={import.meta.env.SITE} />
<meta property="og:title" content={title} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:description" content={description} />
<meta property="og:locale:alternate" content="en_UK" />
<meta property="og:type" content="esports:clash_of_clans" />

<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={image.url} />
<meta property="twitter:image:alt" content={image.alt} />

<meta property="og:image" content={image.url} />
<meta property="og:image:alt" content={image.alt} />
<meta property="og:image:type" content="image/svg" />

{
  tags.length !== 0 &&
    tags.map((tag) => <meta property="og:article:tag" content={tag} />)
}
